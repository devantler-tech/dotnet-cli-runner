using CliWrap;

namespace Devantler.CLIRunner.Tests.CLITests;

/// <summary>
/// Integration tests for the <see cref="CLI.RunAsync"/> method.
/// </summary>
public class RunAsyncTests
{
  /// <summary>
  /// Tests that the <see cref="CLI.RunAsync"/> method returns the expected exit code and stdout result
  /// </summary>
  /// <returns></returns>
  // Generated by Copilot
  [Fact]
  public async Task RunAsync_GivenValidCommand_ReturnsZeroExitCodeAndStdout()
  {
    // Arrange
    string commandText = Environment.OSVersion.Platform switch
    {
      PlatformID.Win32NT => "cmd.exe",
      PlatformID.Unix => "echo",
      PlatformID.MacOSX => "echo",
      PlatformID.Win32S => throw new NotImplementedException(),
      PlatformID.Win32Windows => throw new NotImplementedException(),
      PlatformID.WinCE => throw new NotImplementedException(),
      PlatformID.Xbox => throw new NotImplementedException(),
      PlatformID.Other => throw new NotImplementedException(),
      _ => throw new NotSupportedException("Unsupported platform")
    };

    string arguments = Environment.OSVersion.Platform switch
    {
      PlatformID.Win32NT => "/c echo Hello, World!",
      PlatformID.Unix => "Hello, World!",
      PlatformID.MacOSX => "Hello, World!",
      PlatformID.Win32S => throw new NotImplementedException(),
      PlatformID.Win32Windows => throw new NotImplementedException(),
      PlatformID.WinCE => throw new NotImplementedException(),
      PlatformID.Xbox => throw new NotImplementedException(),
      PlatformID.Other => throw new NotImplementedException(),
      _ => throw new NotSupportedException("Unsupported platform")
    };

    var command = new Command(commandText).WithArguments(arguments);
    var cancellationToken = CancellationToken.None;
    var validation = CommandResultValidation.ZeroExitCode;
    bool silent = false;

    // Act
    var (exitCode, result) = await CLI.RunAsync(command, validation, silent, cancellationToken: cancellationToken);

    // Assert
    Assert.Equal(0, exitCode);
    Assert.Contains("Hello, World!", result, StringComparison.Ordinal);
  }

  /// <summary>
  /// Tests that the <see cref="CLI.RunAsync"/> method returns the expected exit code and stderr result
  /// </summary>
  /// <returns></returns>
  [Fact]
  public async Task RunAsync_GivenInvalidCommand_ReturnsOneExitCodeAndNoOutput()
  {
    // Arrange
    var command = new Command("ech")
      .WithArguments("Hello, World!");
    var cancellationToken = CancellationToken.None;
    var validation = CommandResultValidation.ZeroExitCode;
    bool silent = false;

    // Act
    var (exitCode, _) = await CLI.RunAsync(command, validation, silent, cancellationToken: cancellationToken);

    // Assert
    Assert.Equal(1, exitCode);
  }

  /// <summary>
  /// Tests that the <see cref="CLI.RunAsync"/> method returns the expected exit code and stderr result
  /// </summary>
  /// <returns></returns>
  [Fact]
  public async Task RunAsync_GivenInvalidArgument_ReturnsOneExitCodeAndStderr()
  {
    // Arrange
    var command = new Command("cat")
      .WithArguments("--invalid")
      .WithValidation(CommandResultValidation.ZeroExitCode);
    var cancellationToken = CancellationToken.None;
    bool silent = false;

    // Act
    var (exitCode, _) = await CLI.RunAsync(command, CommandResultValidation.ZeroExitCode, silent, cancellationToken: cancellationToken);

    // Assert
    Assert.Equal(1, exitCode);
  }

  /// <summary>
  /// Tests that the <see cref="CLI.RunAsync"/> method throws an <see cref="ArgumentNullException"/> when the command is null
  /// </summary>
  [Fact]
  public async Task RunAsync_GivenNullCommand_ReturnsArgumentNullException()
  {
    // Arrange
    Command command = null!;
    var cancellationToken = CancellationToken.None;
    var validation = CommandResultValidation.ZeroExitCode;
    bool silent = false;

    // Act
    async Task Act() => await CLI.RunAsync(command, validation, silent, cancellationToken: cancellationToken).ConfigureAwait(false);

    // Assert
    _ = await Assert.ThrowsAsync<ArgumentNullException>(Act);
  }

}


